library(e1071)
library(e1071) # skewness, kurtosis
set.seed(123)
df = read.csv("./data/webbink-gc.csv")
library(GGally) # ggpairs
library(e1071) # skewness, kurtosis
set.seed(123)
df = read.csv("./data/webbink-gc.csv")
View(df)
dim(df)
str(df)
## NA Analysis
range(colMeans(is.na(df)))
# there are no columns with more than 20% missing values
# so there is no need to remove any
colMeans(is.na(df))
range(rowMeans(is.na(df)))
unique(rowMeans(is.na(df)))
# we can procede to imputation of the centered value
na.columns = which(colMeans(is.na(df))>0)
for(i in na.columns){
print(i)
df[is.na(df[,i]), i] = round(mean(df[,i], na.rm = TRUE), 2)
}
colMeans(is.na(df))
unique(rowMeans(is.na(df)))
# Indicators (position, dispersion, form..), graphic representations, analysis of (possible) outliers
# Position : mean, trimmed mean, median - and comparison between them; quartiles,...
# Dispersion: range and inter-quartile range, variance and standard deviation, coefficient of variation (for variables that do not change sign)
# Shape : skewness, kurtosis
summary(df)
boxplot(df[,-1])
plot.univariate.analysis = function(x, name){
par(mfrow= c(1, 2), oma= c(0, 2, 3, 1))
print(summary(x))                               # mean - influenced by outliers, not so robust; median - better suited for skewed dist to derive at central tendency
print(paste("range =", range(x)))
print(paste("inter-quartile range =", IQR(x)))  # less sensitive to outliers, useful to identify them
print(paste("variance =", var(x)))
print(paste("st. deviation =", sd(x)))          # how close the values are to the mean
print(paste("skewness =", skewness(x)))         # shape
print(paste("kurtosis =", kurtosis(x)))         # excess kurtosis describes the tail shape of the distribution
hist(x,
breaks= seq(round(min(x))-5, round(max(x))+5, by= 5),
main= paste("Boxplot of ", name))
boxplot(x, yaxt= 'n',
main= paste("Boxplot of ", name))
axis(2, las= 2)
}
## Gal.long
plot.univariate.analysis(df$Gal.long, "Gal.long")
plot.univariate.analysis = function(x, name){
par(mfrow= c(1, 2), oma= c(0, 2, 3, 1))
print(summary(x))                               # mean - influenced by outliers, not so robust; median - better suited for skewed dist to derive at central tendency
#print(paste("range =", range(x)))
print(paste("inter-quartile range =", IQR(x)))  # less sensitive to outliers, useful to identify them
print(paste("variance =", var(x)))
print(paste("st. deviation =", sd(x)))          # how close the values are to the mean
print(paste("skewness =", skewness(x)))         # shape
print(paste("kurtosis =", kurtosis(x)))         # excess kurtosis describes the tail shape of the distribution
hist(x,
breaks= seq(round(min(x))-5, round(max(x))+5, by= 5),
main= paste("Boxplot of ", name))
boxplot(x, yaxt= 'n',
main= paste("Boxplot of ", name))
axis(2, las= 2)
}
## Gal.long
plot.univariate.analysis(df$Gal.long, "Gal.long")
## Gal.lat
plot.univariate.analysis(df$Gal.lat, "Gal.lat")
ggcorr(df[,-1], label = TRUE)
library(GGally) # ggpairs
library(e1071) # skewness, kurtosis
set.seed(123)
df = read.csv("./data/webbink-gc.csv")
View(df)
dim(df)
str(df)
summary(df)
## NA Analysis
range(colMeans(is.na(df)))
# there are no columns with more than 20% missing values
# so there is no need to remove any
colMeans(is.na(df))
range(rowMeans(is.na(df)))
unique(rowMeans(is.na(df)))
# we can procede to imputation of the centered value
na.columns = which(colMeans(is.na(df))>0)
for(i in na.columns){
print(i)
df[is.na(df[,i]), i] = round(mean(df[,i], na.rm = TRUE), 2)
}
colMeans(is.na(df))
unique(rowMeans(is.na(df)))
# Indicators (position, dispersion, form..), graphic representations, analysis of (possible) outliers
# Position : mean, trimmed mean, median - and comparison between them; quartiles,...
# Dispersion: range and inter-quartile range, variance and standard deviation, coefficient of variation (for variables that do not change sign)
# Shape : skewness, kurtosis
summary(df)
boxplot(df[,-1])
plot.univariate.analysis = function(x, name){
par(mfrow= c(1, 2), oma= c(0, 2, 3, 1))
print(summary(x))                               # mean - influenced by outliers, not so robust; median - better suited for skewed dist to derive at central tendency
#print(paste("range =", range(x)))
print(paste("inter-quartile range =", IQR(x)))  # less sensitive to outliers, useful to identify them
print(paste("variance =", var(x)))
print(paste("st. deviation =", sd(x)))          # how close the values are to the mean
print(paste("skewness =", skewness(x)))         # shape
print(paste("kurtosis =", kurtosis(x)))         # excess kurtosis describes the tail shape of the distribution. The normal distribution has zero excess kurtosis and thus the standard tail shape. It is said to be mesokurtic. Negative excess kurtosis would indicate a thin-tailed data distribution, and is said to be platykurtic. Positive excess kurtosis would indicate a fat-tailed distribution, and is said to be leptokurtic.
hist(x,
breaks= seq(round(min(x))-5, round(max(x))+5, by= 5),
main= paste("Boxplot of ", name))
boxplot(x, yaxt= 'n',
main= paste("Boxplot of ", name))
axis(2, las= 2)
}
## Gal.long
plot.univariate.analysis(df$Gal.long, "Gal.long")
## Gal.lat
plot.univariate.analysis(df$Gal.lat, "Gal.lat")
## R.sol.kpc
plot.univariate.analysis(df$R.sol.kpc, "R.sol.kpc")
## R.GC.kpc
plot.univariate.analysis(df$R.GC.kpc, "R.GC.kpc")
## m.H.metal
plot.univariate.analysis(df$m.H.metal, "m.H.metal")
## Mv
plot.univariate.analysis(df$Mv, "Mv")
## r.core.pc
plot.univariate.analysis(df$r.core.pc, "r.core.pc")
## r.tidal.pc
plot.univariate.analysis(df$r.tidal.pc, "r.tidal.pc")
## conc
plot.univariate.analysis(df$conc, "conc")
## log.t.rad
plot.univariate.analysis(df$log.t.rad, "log.t.rad")
## log.rho.cen
plot.univariate.analysis(df$log.rho.cen, "log.rho.cen")
## s0.km.s
plot.univariate.analysis(df$s0.km.s, "s0.km.s")
## V.esc.km.s
plot.univariate.analysis(df$V.esc.km.s, "V.esc.km.s")
## VHB.magl
plot.univariate.analysis(df$VHB.magl, "VHB.magl")
## E.B.V.mag
plot.univariate.analysis(df$E.B.V.mag, "E.B.V.mag")
## Ellipt
plot.univariate.analysis(df$Ellipt, "Ellipt")
## V.t.mag
plot.univariate.analysis(df$V.t.mag, "V.t.mag")
## Cent.surf.bright
plot.univariate.analysis(df$Cent.surf.bright, "Cent.surf.bright")
ggpairs(df[,-1])
# ggcorr(df[,-1], label = TRUE)
# Several high correlations, even 100% correlations
ggcorr(df[, -1], geom = "blank", label = TRUE, hjust = 0.67, size=2.5) +
geom_point(size = 10, aes(color = coefficient > 0, alpha = abs(coefficient) > 0.5)) +
scale_alpha_manual(values = c("TRUE" = 0.25, "FALSE" = 0)) +
guides(color = FALSE, alpha = FALSE)
ggsave("correlations raw df.png")
ggsave("correlations.png")
# ggcorr(df[,-1], label = TRUE)
# Several high correlations, even 100% correlations
ggcorr(df, geom = "blank", label = TRUE, hjust = 0.67, size=2.5) +
geom_point(size = 10, aes(color = coefficient > 0, alpha = abs(coefficient) > 0.5)) +
scale_alpha_manual(values = c("TRUE" = 0.25, "FALSE" = 0)) +
guides(color = FALSE, alpha = FALSE)
#par(mfrow= c(1, 2), oma= c(0, 2, 3, 1))
print(summary(ft))
plot.univariate.analysis = function(df, ft, label){
#par(mfrow= c(1, 2), oma= c(0, 2, 3, 1))
print(summary(ft))
print(paste("variance =", var(ft)))
print(paste("skewness =", skewness(ft)))
g1 = ggplot(df,aes(y=ft)) +
labs(title=paste("Boxplot of",label), y=label) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
geom_boxplot()
g2 = ggplot(df,aes(x=ft)) +
labs(title=paste("Histogram of",label), x=label) +
geom_histogram()
g = grid.arrange(g1, g2, nrow=1)
ggsave(paste("hist_and_box_raw",label,".png", sep="_"), g)
print(g)
}
## Gal.long
plot.univariate.analysis(df, df$Gal.long, "Gal.long")
library(ggplot2)
library(gridExtra)
## Gal.long
plot.univariate.analysis(df, df$Gal.long, "Gal.long")
## Gal.long
plot.univariate.analysis(df, df$Gal.long, "Gal.long")
## Gal.lat
plot.univariate.analysis(df, df$Gal.lat, "Gal.lat")
## R.sol.kpc
plot.univariate.analysis(df, df$R.sol.kpc, "R.sol.kpc")
## R.GC.kpc
plot.univariate.analysis(df, df$R.GC.kpc, "R.GC.kpc")
## m.H.metal
plot.univariate.analysis(df, df$m.H.metal, "m.H.metal")
## Mv
plot.univariate.analysis(df, df$Mv, "Mv")
## r.core.pc
plot.univariate.analysis(df, df$r.core.pc, "r.core.pc")
## r.tidal.pc
plot.univariate.analysis(df, df$r.tidal.pc, "r.tidal.pc")
## conc
plot.univariate.analysis(df, df$conc, "conc")
## log.t.rad
plot.univariate.analysis(df, df$log.t.rad, "log.t.rad")
## log.rho.cen
plot.univariate.analysis(df, df$log.rho.cen, "log.rho.cen")
## s0.km.s
plot.univariate.analysis(df, df$s0.km.s, "s0.km.s")
## V.esc.km.s
plot.univariate.analysis(df, df$V.esc.km.s, "V.esc.km.s")
## VHB.magl
plot.univariate.analysis(df, df$VHB.magl, "VHB.magl")
## E.B.V.mag
plot.univariate.analysis(df, df$E.B.V.mag, "E.B.V.mag")
## Ellipt
plot.univariate.analysis(df, df$Ellipt, "Ellipt")
## V.t.mag
plot.univariate.analysis(df, df$V.t.mag, "V.t.mag")
## Cent.surf.bright
plot.univariate.analysis(df, df$Cent.surf.bright, "Cent.surf.bright")
ggpairs(df[,-1])
library(GGally) # ggpairs
library(e1071) # skewness, kurtosis
library(ggplot2)
library(gridExtra)
set.seed(123)
df = read.csv("./data/webbink-gc.csv")
View(df)
dim(df)
str(df)
summary(df)
# we can procede to imputation of the centered value
na.columns = which(colMeans(is.na(df))>0)
for(i in na.columns){
print(i)
df[is.na(df[,i]), i] = round(mean(df[,i], na.rm = TRUE), 2)
}
write.csv(df, "cleaned.csv", row.names=F)
df = read.csv("./data/cleaned.csv")
View(df)
dim(df)
str(df)
summary(df)
?pca
pca <-PCA(df[,-1])
## libraries
library("FactoMineR")
?pca
pca <-PCA(df[,-1])
pca
pca$svd$V # Eigenvectors
pca$svd$U
## plot of the eigenvalues:
barplot(pca$eig[,1],main="Eigenvalues",names.arg=1:nrow(pca$eig))
## Eigenvalues
pca$eig
## Eigenvalues
pca$eig
## Eigenvalues
pca$eig
pca$var
pca
pca$cor
## In regard of the variables
## Interpretation
pca$var
## Contributions
pca$var$contrib
pca$var$cor
pca
## In regard of the individuals
## Interpretation
pca$ind
## correlations variables - dimensions
pca$ind$cor
## cos2
pca$ind$cos2
## Contributions
pca$ind$contrib
## In regard of the variables
## Interpretation
pca$var
## Eigenvectors
pca$svd$V
## Eigenvectors
pca$svd$V
dim(df)
## easier to see the "elbow"
barplot(pca$eig[,1],
main="Eigenvalues",
names.arg=1:nrow(pca$eig))
## easier to see the "elbow"
barplot(pca$eig[,1],
main="Eigenvalues",
names.arg=1:nrow(pca$eig))
?std
?sd
clean = scale(df)
clean = scale(df[,-1])
clean = df
clean[,-1] = scale(df[,-1])
clean
library(GGally) # ggpairs
library(e1071) # skewness, kurtosis
library(ggplot2)
library(gridExtra)
set.seed(123)
df = read.csv("./data/webbink-gc.csv")
# we can procede to imputation of the centered value
na.columns = which(colMeans(is.na(df))>0)
for(i in na.columns){
print(i)
df[is.na(df[,i]), i] = round(mean(df[,i], na.rm = TRUE), 2)
}
clean = df
clean[,-1] = scale(df[,-1])
write.csv(clean, "./data/cleaned.csv", row.names=F)
## Read data frame
df = read.csv("./data/cleaned.csv")
set.seed(123)
## PCA
pca <-PCA(df[,-1])
pca
## Eigenvectors
pca$svd$V
## easier to see the "elbow"
barplot(pca$eig[,1],
main="Eigenvalues",
names.arg=1:nrow(pca$eig))
## Eigenvalues
pca$eig
## In regard of the variables
## Interpretation
pca$var
## correlations variables - dimensions
pca$var$cor
## cos2
pca$var$cos2
## Contributions
pca$var$contrib
## In regard of the variables
## Interpretation
pca$var
## Contributions
pca$var$contrib
## Contributions
pca$var$contrib == pca$var
## Read data frame
df = read.csv("./data/cleaned.csv")
## PCA
pca <-PCA(df[,-1])
## In regard of the variables
## Interpretation
pca$var
pca$var$contrib
## Eigenvalues
pca$eig
pca
## coordinates of the individuals
## which ones are more extreme
plot(pca, axes = c(1,2), choix = c("ind","var","varcor"), col.var="black")
## Eigenvalues
pca$eig
pca
## PCA
pca = PCA(df[,-1])
## coordinates of the individuals
## which ones are more extreme in each PC
plot(pca, axes = c(1,2), choix = c("ind","var","varcor"), col.var="black")
