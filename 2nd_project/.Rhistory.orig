ggscatter(mds.tb, x = "Dim.1", y = "Dim.2",
size = 1,
label = colnames(df_cor),
repel = TRUE,
title = "Classical MDS - dynamics data set")
# libraries
library(smacof)
library(magrittr)
library(dplyr)
library(ggpubr)
library(MASS)
# seed
set.seed(123)
## Read data frame
#df = readRDS("./data/gc.dat")
#df = readRDS("./data/location.dat")
df = readRDS("./data/dynamics.dat")
# correlation matrix
df_cor = cor(df)
# dissimilarities
dissim = sim2diss(df_cor, method = "corr", to.dist = TRUE)
mds = #(1 - df_cor) %>%
dissim %>%
cmdscale() #classical MDS
mds
summary(mds)
mds.tb = mds %>%
as_tibble()
colnames(mds.tb) = c("Dim.1", "Dim.2")
ggscatter(mds.tb, x = "Dim.1", y = "Dim.2",
size = 1,
label = colnames(df_cor),
repel = TRUE,
title = "Classical MDS - dynamics data set")
# libraries
library(psych)
library(FactoMineR)
#library(car)
library(ggplot2)
library(GGally) # ggcorr
library(ggpubr)
# seed
set.seed(123)
plot_loadings = function(l, label){
names(l) = c("RC1", "RC2")
ggscatter(l, x = "RC1", y = "RC2",
size = 1,
label = label,
repel = TRUE,
title = "Factor Analysis - graph of variables")
}
df = readRDS("./data/location.dat")
ggcorr(df, geom = "blank", label = TRUE, hjust = 0.67, size=2.5) +
geom_point(size = 10, aes(color = coefficient > 0, alpha = abs(coefficient) > 0.5)) +
scale_alpha_manual(values = c("TRUE" = 0.25, "FALSE" = 0)) +
guides(color = FALSE, alpha = FALSE)
df = readRDS("./data/dynamics.dat")
ggcorr(df, geom = "blank", label = TRUE, hjust = 0.67, size=2.5) +
geom_point(size = 10, aes(color = coefficient > 0, alpha = abs(coefficient) > 0.5)) +
scale_alpha_manual(values = c("TRUE" = 0.25, "FALSE" = 0)) +
guides(color = FALSE, alpha = FALSE)
ggsave("fa_dyn_correlations.png")
df_cor = cor(df)
KMO(df_cor)
# Complete model
pca = PCA(df)
pca$eig
pca$eig
# Factor analysis from 4 PCA, so with 4 comon factors
fc = principal(df_cor, 4, rotate="varimax")
# Comunalities
fc$communality
# Loadings
# They are not the PC, but the rotated PC (RC)
fc$loadings
print(fc$loadings,cutoff = 0.6)
# Residuals
fc
# Plot
plot_loadings(data.frame(fc$loadings[,1:2]), names(df))
print(fc$loadings,cutoff = 0.6)
# Residuals
fc
# libraries
library(smacof)
library(magrittr)
library(dplyr)
library(ggpubr)
library(MASS)
# seed
set.seed(123)
## Read data frame
#df = readRDS("./data/gc.dat")
#df = readRDS("./data/location.dat")
df = readRDS("./data/dynamics.dat")
# correlation matrix
df_cor = cor(df)
# dissimilarities
dissim = sim2diss(df_cor, method = "corr", to.dist = TRUE)
mds = #(1 - df_cor) %>%
dissim %>%
cmdscale() #classical MDS
mds
summary(mds)
mds.tb = mds %>%
as_tibble()
colnames(mds.tb) = c("Dim.1", "Dim.2")
ggscatter(mds.tb, x = "Dim.1", y = "Dim.2",
size = 1,
label = colnames(df_cor),
repel = TRUE,
title = "Classical MDS - dynamics data set")
# packages ----------------------------------------------------------------
require(GGally)
require(latex2exp)
require(psych)
require(tidyverse)
# data sets ---------------------------------------------------------------
dat.loc= readRDS("./data/location.dat")
dat.dyn= readRDS("./data/dynamics.dat")
dat.num= readRDS("./data/gc.dat")
# variables ---------------------------------------------------------------
var.units= c(
TeX("$\\textbf{gal.long}$ ($\\degree$)"),
TeX("$\\textbf{gal.lat}$ ($\\degree$)"),
TeX("$\\textbf{r.sol}$ (kpc)"),
TeX("$\\textbf{r.gc}$ (kpc)"),
TeX("$\\textbf{metal}$"),
TeX("$\\textbf{mv}$ (mag)"),
TeX("$\\textbf{r.core}$ (pc)"),
TeX("$\\textbf{r.tidal} (pc)"),
TeX("$\\textbf{conc}$"),
TeX("$\\textbf{log.t}$ (yr)"),
TeX("$\\textbf{log.rho}$ ($M_{sun}/pc^3$)"),
TeX("$\\textbf{s0}$ (km/s)"),
TeX("$\\textbf{v.esc}$ (km/s)"),
TeX("$\\textbf{vhb}$ (mag)"),
TeX("$\\textbf{e.bv} (mag)"),
TeX("$\\textbf{bv}$ (mag)"),
TeX("$\\textbf{ellipt}$"),
TeX("$\\textbf{v.t} (mag)"),
TeX("$\\textbf{csb}$ ($mag/arcsec^2$)")
)
# correlations ------------------------------------------------------------
dat.num.corr= cor(dat.num)
# all variables
dat.num %>%
ggcorr(
geom= "blank",
label= T,
hjust= 0.55
) +
geom_point(
size= 10,
aes(
colour= coefficient > 0,
alpha= abs(coefficient) > 0.5
)
) +
scale_alpha_manual(values= c("TRUE"= 0.25, "FALSE"= 0)) +
guides(
colour= F,
alpha= F
)
dat= dat.num[, -c(1, 2, 18)]
dat.corr= cor(dat)
# all variables except v.t (18), gal.lat (2), and gal.long(1)
dat %>%
ggcorr(
geom= "blank",
label= T,
hjust= 0.75
) +
geom_point(
size= 10,
aes(
colour= coefficient > 0,
alpha= abs(coefficient) > 0.5
)
) +
scale_alpha_manual(values= c("TRUE"= 0.25, "FALSE"= 0)) +
guides(
colour= F,
alpha= F
)
# kmo ---------------------------------------------------------------------
# analyse goodness-of-fit test of the model
KMO(dat.corr)
# factor analysis model extraction ----------------------------------------
# extract principal components (model with five common factors)
dat.pcs= principal(dat.corr, 5, rotate= "varimax")
# communalities with a five common factors model
dat.pcs$communality
# rotated components
dat.pcs$loadings
dat.pcs$residual
dat.pcs
# alternatives for model extraction ---------------------------------------
# principal axis
dat.pa= fa(
dat.corr,
nfactors= 2,
n.obs= 50,
fm= "pa",
rotate= "varimax",
SMC= F)
# min residuals
dat.minres= fa(
dat.corr,
nfactors= 2,
n.obs= 50,
fm= "minres",
max.iter= 100,
rotate= "varimax",
SMC= F
)
# checking normality graphically
scatterplotMatrix(bank)
# maximum likelihood
dat.ml= fa(
dat.corr,
nfactors= 5,
n.obs= 50,
fm= "ml",
rotate= "varimax",
SMC= F
)
# checking normality graphically
scatterplotMatrix(dat)
# packages ----------------------------------------------------------------
require(GGally)
require(latex2exp)
require(psych)
require(tidyverse)
# checking normality graphically
scatterplotMatrix(dat)
?psych
# checking normality graphically
scatterplotMatrix(dat)
# communalities with a five common factors model
dat.pcs$communality
# rotated components
dat.pcs$loadings
## libraries
library(FactoMineR)
library(ggplot2)
set.seed(123)
## Read data frame
df = readRDS("./data/location.dat")
# View(df)
# dim(df)
# str(df)
summary(df)
## PCA
pca = PCA(df)
## Eigenvalues
pca$eig
## easier to see the "elbow"
#png("loc_eigen_barplot.png")
barplot(pca$eig[,1],
main="Eigenvalues",
names.arg=1:nrow(pca$eig))
## Interpretation - In regard of the variables
#png("loc_pca_graph_var_dim12.png")
plot(pca, axes = c(1,2), choix = c("var"), col.var="black")
#dev.off()
#png("loc_pca_graph_var_dim13.png")
plot(pca, axes = c(1,3), choix = c("var"), col.var="black")
## correlations variables - dimensions/PC
pca$var$cor
## Contributions
pca$var$contrib
## Contributions
## the more extreme will have the higher contribution
pca$ind$contrib
## Contributions
## the more extreme will have the higher contribution
pca$ind$contrib[13,]
## Contributions
## the more extreme will have the higher contribution
pca$ind$contrib[10,]
## Contributions
## the more extreme will have the higher contribution
pca$ind$contrib[11,]
## Contributions
## the more extreme will have the higher contribution
pca$ind$contrib[13,]
## Contributions
## the more extreme will have the higher contribution
pca$ind$contrib[5,]
# packages ----------------------------------------------------------------
require(GGally)
require(latex2exp)
require(psych)
require(tidyverse)
# data sets ---------------------------------------------------------------
dat.loc= readRDS("./data/location.dat")
dat.dyn= readRDS("./data/dynamics.dat")
dat.num= readRDS("./data/gc.dat")
# variables ---------------------------------------------------------------
var.units= c(
TeX("$\\textbf{gal.long}$ ($\\degree$)"),
TeX("$\\textbf{gal.lat}$ ($\\degree$)"),
TeX("$\\textbf{r.sol}$ (kpc)"),
TeX("$\\textbf{r.gc}$ (kpc)"),
TeX("$\\textbf{metal}$"),
TeX("$\\textbf{mv}$ (mag)"),
TeX("$\\textbf{r.core}$ (pc)"),
TeX("$\\textbf{r.tidal} (pc)"),
TeX("$\\textbf{conc}$"),
TeX("$\\textbf{log.t}$ (yr)"),
TeX("$\\textbf{log.rho}$ ($M_{sun}/pc^3$)"),
TeX("$\\textbf{s0}$ (km/s)"),
TeX("$\\textbf{v.esc}$ (km/s)"),
TeX("$\\textbf{vhb}$ (mag)"),
TeX("$\\textbf{e.bv} (mag)"),
TeX("$\\textbf{bv}$ (mag)"),
TeX("$\\textbf{ellipt}$"),
TeX("$\\textbf{v.t} (mag)"),
TeX("$\\textbf{csb}$ ($mag/arcsec^2$)")
)
# correlations ------------------------------------------------------------
dat.num.corr= cor(dat.num)
# all variables
dat.num %>%
ggcorr(
geom= "blank",
label= T,
hjust= 0.55
) +
geom_point(
size= 10,
aes(
colour= coefficient > 0,
alpha= abs(coefficient) > 0.5
)
) +
scale_alpha_manual(values= c("TRUE"= 0.25, "FALSE"= 0)) +
guides(
colour= F,
alpha= F
)
# kmo ---------------------------------------------------------------------
# analyse goodness-of-fit test of the model
KMO(dat.corr)
dat= dat.num[, -c(1, 2, 18)]
dat.corr= cor(dat)
# all variables except v.t (18), gal.lat (2), and gal.long(1)
dat %>%
ggcorr(
geom= "blank",
label= T,
hjust= 0.75
) +
geom_point(
size= 10,
aes(
colour= coefficient > 0,
alpha= abs(coefficient) > 0.5
)
) +
scale_alpha_manual(values= c("TRUE"= 0.25, "FALSE"= 0)) +
guides(
colour= F,
alpha= F
)
# kmo ---------------------------------------------------------------------
# analyse goodness-of-fit test of the model
KMO(dat.corr)
# kmo ---------------------------------------------------------------------
# analyse goodness-of-fit test of the model
KMO(dat.corr)
# factor analysis model extraction ----------------------------------------
# extract principal components (model with five common factors)
dat.pcs= principal(dat.corr, 5, rotate= "varimax")
# communalities with a five common factors model
dat.pcs$communality
# rotated components
dat.pcs$loadings
# factor analysis model extraction ----------------------------------------
pca = PCA(dat)
library(FactoMineR)
# factor analysis model extraction ----------------------------------------
pca = PCA(dat)
pca$eig
pca$eig
pca$eig
# communalities with a five common factors model
dat.pcs$communality
# extract principal components (model with five common factors)
dat.pcs= principal(dat.corr, 4, rotate= "varimax")
# communalities with a five common factors model
dat.pcs$communality
# rotated components
dat.pcs$loadings
dat.pcs
# functions ---------------------------------------------------------------
plot_loadings = function(l, label){
names(l) = c("RC1", "RC2")
ggscatter(l, x = "RC1", y = "RC2",
size = 1,
label = label,
repel = TRUE,
title = "Factor Analysis - graph of variables")
}
# RC1: opposes central velocity disp4ersion (s0) and central escape velocity (v.esc) to absolute magnitude (mv)
# RC4: opposes the logarithm of central relaxation time scale (log.t) and the core radius (r.core) to the core concentration parameter (conc)
# RC3: high values in distance from the Sun (r.sun), distance from the Galactic Centre (r.gc), and level of the horizontal branch (vhb).
# RC2: high values of B-V colour excess (e.bv) and B-V colour index (B-V)
# RC5: high value of logarithm of metallicity with respect to solar metallicity (metal)
plot_loadings(data.frame(dat.pcs$loadings[,1:2]), names(dat))
library(ggpubr)
# RC1: opposes central velocity disp4ersion (s0) and central escape velocity (v.esc) to absolute magnitude (mv)
# RC4: opposes the logarithm of central relaxation time scale (log.t) and the core radius (r.core) to the core concentration parameter (conc)
# RC3: high values in distance from the Sun (r.sun), distance from the Galactic Centre (r.gc), and level of the horizontal branch (vhb).
# RC2: high values of B-V colour excess (e.bv) and B-V colour index (B-V)
# RC5: high value of logarithm of metallicity with respect to solar metallicity (metal)
plot_loadings(data.frame(dat.pcs$loadings[,1:2]), names(dat))
print(dat.pcs$loadings,cutoff = 0.6)
## libraries
library(FactoMineR)
library(ggplot2)
set.seed(123)
## Read data frame
df = readRDS("./data/dynamics.dat")
# View(df)
# dim(df)
# str(df)
summary(df)
## PCA
pca = PCA(df)
## Eigenvalues
pca$eig
## Eigenvalues
pca$eig
## correlations variables - dimensions/PC
pca$var$cor
## correlations variables - dimensions/PC
pca$var$cor
## Contributions
pca$var$contrib
## Eigenvalues
pca$eig
## correlations variables - dimensions/PC
pca$var$cor
## Contributions
pca$var$contrib
10.832547292 + 14.485022431+9.200564873+14.658600614+11.118059120+11.823241592
## libraries
library(FactoMineR)
library(ggplot2)
set.seed(123)
## Read data frame
df = readRDS("./data/dynamics.dat")
# View(df)
# dim(df)
# str(df)
summary(df)
## PCA
pca = PCA(df)
## Eigenvalues
pca$eig
## Eigenvalues
pca$eig
## Eigenvalues
pca$eig
## easier to see the "elbow"
#png("dyn_eigen_barplot.png")
barplot(pca$eig[,1],
main="Eigenvalues",
names.arg=1:nrow(pca$eig))
## Interpretation - In regard of the variables
#png("dyn_pca_graph_var_dim12.png")
plot(pca, axes = c(1,2), choix = c("var"), col.var="black")
## correlations variables - dimensions/PC
pca$var$cor
## Contributions
pca$var$contrib
## Eigenvectors
pca$svd$V
#dev.off()
#png("dyn_pca_graph_ind_dim12_contr5.png")
plot(pca, axes = c(1,2), select="contrib 5") # plot the 5 individuals with the highest contribution
#dev.off()
#png("dyn_pca_graph_ind_dim13_contr5.png")
plot(pca, axes = c(1,3), select="contrib 5") # plot the 5 individuals with the highest contribution
#dev.off()
#png("dyn_pca_graph_ind_dim14_contr5.png")
plot(pca, axes = c(1,4), select="contrib 5") # plot the 5 individuals with the highest contribution
#dev.off()
#png("dyn_pca_graph_ind_dim15_contr5.png")
plot(pca, axes = c(1,5), select="contrib 5") # plot the 5 individuals with the highest contribution
pca$ind$contrib[c(5,6,13,20,63,110),]
pca
pca$ind
## Eigenvalues
pca$eig
## Contributions
## the more extreme will have the higher contribution
pca$ind$contrib
## Contributions
pca$var$contrib
14.42063941+21.80822924+24.30298867
## Eigenvalues
pca$eig
## Eigenvalues
pca$eig
## Contributions
pca$var$contrib
14.2127271+20.2939817+14.0541014
14.2127271+20.2939817+14.0541014+12.1622227
20.349636529+23.287894702
